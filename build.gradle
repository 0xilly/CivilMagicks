buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id "cz.alenkacz.gradle.scalafmt" version "1.8.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'maven-publish'
apply plugin: 'scala'


version = '0.0.1'
group = 'info.mdhs.mods.civilmagicks'
archivesBaseName = 'civilmagicks'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

//set up source sets
sourceSets {
    api
    generated
}

//Sorce set configureation
configurations {
    //API
    apiImplementation.extendsFrom minecraft

    //GENERATED
    generatedImplementation.extendsFrom apiImplementation
    generatedCompileOnly.extendsFrom apiCompileOnly
    generatedCompileClasspath.extendsFrom apiCompileClasspath
    generatedAnnotationProcessor.extendsFrom apiAnnotationProcessor
    generatedRuntimeOnly.extendsFrom apiRuntimeOnly
    generatedRuntimeClasspath.extendsFrom apiRuntimeClasspath

    //MAIN
    implementation.extendsFrom generatedImplementation
    compileOnly.extendsFrom generatedCompileOnly
    compileClasspath.extendsFrom generatedCompileClasspath
    annotationProcessor.extendsFrom generatedAnnotationProcessor
    runtimeOnly.extendsFrom generatedRuntimeOnly
    runtimeClasspath.extendsFrom generatedRuntimeClasspath

    //TEST
    testImplementation.extendsFrom implementation
    testCompileOnly.extendsFrom compileOnly
    testCompileClasspath.extendsFrom compileClasspath
    testAnnotationProcessor.extendsFrom annotationProcessor
    testRuntimeOnly.extendsFrom runtimeOnly
    testRuntimeClasspath.extendsFrom compileClasspath
}

dependencies {
    generatedImplementation sourceSets.api.output
    implementation sourceSets.generated.output
    testImplementation sourceSets.main.output
}

minecraft {
    mappings channel: 'snapshot', version: '20190719-1.14.3'
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'examplemod', '--all', '--output', file('src/generated/resources/')

            mods {
                examplemod {
                    source sourceSets.main
                }
            }
        }
    }
}

dependencies {

    minecraft "net.minecraftforge:forge:1.14.4-28.1.0"
    implementation 'net.minecraftforge:Scorge:1.0.4'
    implementation "org.scala-lang:scala-library:${scala_lib}"
    implementation "org.scala-lang.modules:scala-java8-compat_${java8_compact}"

}

task apiJar(type: Jar) {
    group 'build'
    description jar.description.replace("main", "api")
    classifier 'api'
    from sourceSets.api.output
}

task sourcesJar(type: Jar){
    group 'build'
    description 'Assembles a jar archive containing the source files'
    from sourceSets.api.allJava
    from sourceSets.main.allJava
    classifier 'sources'
}

artifacts {
    archives apiJar
    archives sourcesJar
}
jar {
    manifest {
        attributes([
            "Specification-Title": "civilmagicks",
            "Specification-Vendor": "civilmagicks",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"civilmagicks",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

